# NFT Viewer - Technical Specification and Development Plan

## Project Overview
A lean NFT viewer application that allows users to connect their wallets, view their NFTs (especially 3D models), and easily download assets from NFT metadata.

## Core Features
- Wallet connection (MetaMask, Phantom)
- NFT detection and display
- 3D model viewing
- Direct asset downloading
- Format-based categorization

## Technical Architecture

### Frontend Architecture
```
src/
├── components/
│   ├── layout/
│   │   ├── Header.tsx
│   │   ├── Sidebar.tsx
│   │   └── MainView.tsx
│   ├── viewers/
│   │   ├── ThreeDViewer.tsx
│   │   ├── ImageViewer.tsx
│   │   └── ViewerContainer.tsx
│   ├── wallet/
│   │   ├── WalletConnect.tsx
│   │   └── WalletContext.tsx
│   └── shared/
│       ├── AssetCard.tsx
│       ├── TechnicalDetails.tsx
│       └── SearchBar.tsx
├── hooks/
│   ├── useNFTFetching.ts
│   ├── useWallet.ts
│   └── useModelLoader.ts
├── services/
│   ├── wallet.service.ts
│   ├── nft.service.ts
│   └── cache.service.ts
└── utils/
    ├── formatters.ts
    ├── modelHelpers.ts
    └── constants.ts
```

### Backend Architecture
```
server/
├── api/
│   ├── routes/
│   │   ├── nft.routes.ts
│   │   └── wallet.routes.ts
│   └── controllers/
│       ├── nft.controller.ts
│       └── wallet.controller.ts
├── services/
│   ├── blockchain/
│   │   ├── ethereum.service.ts
│   │   └── solana.service.ts
│   └── cache/
│       └── redis.service.ts
└── utils/
    ├── metadata.utils.ts
    └── format.utils.ts
```

## Development Phases

### Phase 1: Foundation (Week 1-2)
1. Project Setup
   - Initialize React project with Vite
   - Set up TypeScript configuration
   - Configure build system
   - Implement basic routing

2. Wallet Integration
   - Implement MetaMask connection
   - Create wallet context
   - Handle connection states
   - Add basic error handling

3. Basic UI Implementation
   - Port existing component structure
   - Implement responsive layout
   - Add loading states
   - Implement basic navigation

### Phase 2: Core Functionality (Week 3-4)
1. NFT Data Fetching
   - Implement Ethereum NFT fetching
   - Add metadata parsing
   - Create caching layer
   - Handle pagination

2. 3D Viewer Implementation
   - Set up Three.js integration
   - Implement model loading
   - Add basic controls
   - Handle different file formats

3. Asset Management
   - Implement download functionality
   - Add format detection
   - Create preview generation
   - Handle loading states

### Phase 3: Enhancement (Week 5-6)
1. Additional Features
   - Add Solana support
   - Implement format categorization
   - Enhance search functionality
   - Add sorting options

2. Performance Optimization
   - Implement proper caching
   - Add load balancing
   - Optimize 3D rendering
   - Enhance error handling

## Technical Dependencies

### Frontend
- React 18+
- TypeScript
- Three.js/React Three Fiber
- TailwindCSS
- ethers.js/web3.js
- @solana/web3.js
- Vite

### Backend
- Node.js
- Express
- Redis (caching)
- TypeScript
- Alchemy SDK
- Metaplex (Solana)

## API Endpoints

### NFT Endpoints
```
GET /api/nfts
  - Query Parameters:
    - wallet: string
    - chain: string
    - page: number
    - limit: number

GET /api/nfts/:id
  - Returns detailed NFT metadata

GET /api/nfts/:id/download
  - Returns direct download link
```

### Wallet Endpoints
```
POST /api/wallet/connect
  - Body:
    - address: string
    - chain: string

GET /api/wallet/assets
  - Query Parameters:
    - address: string
    - chain: string
```

## Caching Strategy
- NFT metadata: 1 hour
- Asset previews: 24 hours
- Wallet data: 5 minutes

## Error Handling
- Implement global error boundary
- Add specific error states for:
  - Wallet connection failures
  - NFT fetching errors
  - Model loading issues
  - Network problems

## Testing Strategy
- Unit tests for core functionality
- Integration tests for API endpoints
- E2E tests for critical user flows
- Performance testing for 3D viewer

## Monitoring and Analytics
- Basic analytics for:
  - User connections
  - Asset downloads
  - Viewer usage
  - Error rates

## Security Considerations
- Implement rate limiting
- Add API key authentication
- Validate file downloads
- Sanitize metadata

## Future Enhancements
- Additional wallet support
- Enhanced 3D model features
- Batch download functionality
- Advanced filtering options


--- execution----


# Development Instructions for NFT Viewer Application

You are tasked with developing a NFT Viewer application based on the provided technical specification and existing React component. Please follow these guidelines:

## Context
This is a lean NFT viewer application focused on allowing users to:
1. Connect their wallets (MetaMask/Phantom)
2. View their NFTs, especially 3D models
3. Download assets directly from NFT metadata
4. Preview different file formats (.glb, .gltf, .vrm, images)

## Key Components
1. The provided React component (`NFTViewer.tsx`) serves as the base UI
2. The technical specification outlines the complete architecture
3. We're focusing on a lean, efficient solution

## Development Guidelines

### Architecture Principles
- Follow the provided folder structure
- Maintain clear separation of concerns
- Implement proper TypeScript types
- Use modern React patterns (hooks, context)

### Implementation Priority
1. Start with core wallet connection
2. Implement NFT fetching
3. Add 3D viewer integration
4. Implement download functionality

### Code Standards
- Use TypeScript for all new files
- Follow React best practices
- Implement proper error handling
- Add comments for complex logic
- Include unit tests for critical functions

### Important Considerations
- Focus on performance optimization
- Implement proper error boundaries
- Handle loading states appropriately
- Consider mobile responsiveness
- Follow accessibility guidelines

## Development Process
1. Review the provided component and technical spec
2. Begin with foundational setup
3. Implement features incrementally
4. Add tests as you develop
5. Document your code

## Questions to Consider
Before implementing each feature, consider:
1. How does this fit into the larger architecture?
2. What error cases need to be handled?
3. How can this be optimized?
4. What testing is needed?

## Deliverables
For each component/feature:
1. TypeScript source code
2. Associated tests
3. Brief documentation
4. Performance considerations

Follow this prompt along with the technical specification to implement the NFT Viewer application. Focus on maintainable, efficient code that fulfills the core requirements while remaining lean and scalable.






-- base component --

import React, { useState } from 'react';
import { Wallet, Search, Box, Image, ChevronRight, Download, Database, HardDrive, Network } from 'lucide-react';

const NFTViewer = () => {
  const [isConnected, setIsConnected] = useState(false);
  const [activeTab, setActiveTab] = useState('3d');
  const [selectedAsset, setSelectedAsset] = useState(null);
  const [searchQuery, setSearchQuery] = useState('');

  // Enhanced mock data with technical details
  const mockModels = [
    {
      id: 1,
      name: "Cyber Samurai Character",
      type: "3d",
      format: "glb",
      thumbnail: "/api/placeholder/400/400",
      description: "High-poly character model with full rigging",
      collection: "Cyber Warriors",
      creator: "Neo Tokyo Arts",
      technical: {
        triangles: "86,542",
        vertices: "42,831",
        materials: "12",
        textureSize: "4K",
        animations: "8",
        fileSize: "128 MB",
        storage: {
          type: "IPFS",
          hash: "QmX7b2...3f4a",
          gateway: "https://ipfs.io/ipfs/QmX7b2...3f4a"
        }
      }
    },
    {
      id: 2,
      name: "Mecha Dragon",
      type: "3d",
      format: "gltf",
      thumbnail: "/api/placeholder/400/400",
      description: "Articulated robot dragon with animations",
      collection: "Mythical Mechs",
      creator: "Digital Beasts",
      technical: {
        triangles: "124,876",
        vertices: "68,433",
        materials: "18",
        textureSize: "8K",
        animations: "12",
        fileSize: "256 MB",
        storage: {
          type: "Arweave",
          hash: "ar://Xf92k...8h2j",
          gateway: "https://arweave.net/Xf92k...8h2j"
        }
      }
    },
    {
      id: 3,
      name: "Space Station Hub",
      type: "3d",
      format: "glb",
      thumbnail: "/api/placeholder/400/400",
      description: "Modular space station environment",
      collection: "Space Habitats",
      creator: "Cosmic Architects",
      technical: {
        triangles: "236,892",
        vertices: "142,544",
        materials: "24",
        textureSize: "4K",
        animations: "4",
        fileSize: "312 MB",
        storage: {
          type: "Decentralized Database",
          hash: "0xf7d2...9e4b",
          gateway: "https://gateway.storage.net/0xf7d2...9e4b"
        }
      }
    }
  ];

  const connectWallet = () => setIsConnected(true);

  return (
    <div className="min-h-screen bg-gradient-to-br from-black via-[#1a0822] to-black text-white">
      {/* Enhanced Header */}
      <header className="border-b border-white/5 bg-black/40 backdrop-blur-xl fixed top-0 w-full z-50">
        <div className="flex justify-between items-center px-8 py-4">
          <div className="flex items-center gap-8">
            <h1 className="text-2xl font-bold text-white">NFT Vault</h1>
            
            <nav className="flex gap-1">
              <button
                onClick={() => setActiveTab('3d')}
                className={`px-4 py-2 rounded-lg flex items-center gap-2 transition-all ${
                  activeTab === '3d' 
                    ? 'bg-white/10 text-white' 
                    : 'text-white/60 hover:text-white hover:bg-white/5'
                }`}
              >
                <Box className="w-4 h-4" />
                3D Models
              </button>
              <button
                onClick={() => setActiveTab('images')}
                className={`px-4 py-2 rounded-lg flex items-center gap-2 transition-all ${
                  activeTab === 'images' 
                    ? 'bg-white/10 text-white' 
                    : 'text-white/60 hover:text-white hover:bg-white/5'
                }`}
              >
                <Image className="w-4 h-4" />
                Images
              </button>
            </nav>
          </div>

          <button
            onClick={connectWallet}
            className={`px-6 py-2 rounded-lg transition-all ${
              isConnected 
                ? 'bg-[#1a0822]/50 text-white/80 border border-purple-500/20' 
                : 'bg-white/5 hover:bg-white/10 border border-white/10'
            }`}
          >
            <span className="flex items-center gap-2">
              <Wallet className="w-4 h-4" />
              {isConnected ? 'Connected' : 'Connect Wallet'}
            </span>
          </button>
        </div>
      </header>

      {/* Main Content */}
      <main className="pt-20 flex h-screen">
        {/* Sidebar */}
        <div className="w-80 border-r border-white/5 bg-black/40 backdrop-blur-sm flex flex-col">
          {/* Search */}
          <div className="p-4 border-b border-white/5">
            <div className="relative">
              <Search className="w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-white/40" />
              <input
                type="text"
                placeholder="Search assets..."
                className="w-full bg-white/5 rounded-lg pl-10 pr-4 py-2 text-sm border border-white/5 focus:outline-none focus:border-white/10"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
            </div>
          </div>

          {/* Asset List */}
          <div className="flex-1 overflow-y-auto">
            {mockModels.map(model => (
              <button
                key={model.id}
                onClick={() => setSelectedAsset(model)}
                className={`w-full p-4 flex items-start gap-3 border-b border-white/5 transition-all ${
                  selectedAsset?.id === model.id 
                    ? 'bg-[#1a0822]/50' 
                    : 'hover:bg-white/5'
                }`}
              >
                <img
                  src={model.thumbnail}
                  alt={model.name}
                  className="w-16 h-16 rounded bg-black/50 object-cover"
                />
                <div className="flex-1 text-left">
                  <h3 className="font-medium mb-1">{model.name}</h3>
                  <p className="text-sm text-white/60">{model.collection}</p>
                </div>
                <ChevronRight className="w-4 h-4 text-white/40" />
              </button>
            ))}
          </div>
        </div>

        {/* Main View */}
        <div className="flex-1 flex flex-col bg-black/20 backdrop-blur-sm">
          {selectedAsset ? (
            <div className="p-8 flex-1 overflow-y-auto">
              {/* Preview Area */}
              <div className="bg-black/40 rounded-lg aspect-video mb-8 flex items-center justify-center border border-white/5">
                <img
                  src={selectedAsset.thumbnail}
                  alt={selectedAsset.name}
                  className="max-h-full w-auto"
                />
              </div>

              {/* Asset Info */}
              <div className="grid grid-cols-12 gap-8">
                {/* Basic Info */}
                <div className="col-span-8">
                  <h2 className="text-2xl font-bold mb-2">{selectedAsset.name}</h2>
                  <p className="text-white/60 mb-6">{selectedAsset.description}</p>
                  <div className="flex gap-6 text-sm">
                    <div>
                      <span className="text-white/40">Collection</span>
                      <p className="font-medium text-white">{selectedAsset.collection}</p>
                    </div>
                    <div>
                      <span className="text-white/40">Creator</span>
                      <p className="font-medium text-white">{selectedAsset.creator}</p>
                    </div>
                    <div>
                      <span className="text-white/40">Format</span>
                      <p className="font-medium text-white">{selectedAsset.format.toUpperCase()}</p>
                    </div>
                  </div>
                </div>

                {/* Download Button */}
                <div className="col-span-4 flex justify-end">
                  <button className="flex items-center gap-2 px-6 py-3 bg-white/5 hover:bg-white/10 rounded-lg border border-white/10 transition-all">
                    <Download className="w-4 h-4" />
                    Download Model
                  </button>
                </div>

                {/* Technical Details */}
                <div className="col-span-12 mt-8">
                  <h3 className="text-lg font-semibold mb-4">Technical Details</h3>
                  <div className="grid grid-cols-3 gap-6">
                    {/* Model Stats */}
                    <div className="bg-black/40 rounded-lg p-4 border border-white/5">
                      <h4 className="text-sm font-medium text-white/40 mb-3">Model Statistics</h4>
                      <div className="space-y-2">
                        <div className="flex justify-between">
                          <span className="text-white/40">Triangles</span>
                          <span className="text-white">{selectedAsset.technical.triangles}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-white/40">Vertices</span>
                          <span className="text-white">{selectedAsset.technical.vertices}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-white/40">Materials</span>
                          <span className="text-white">{selectedAsset.technical.materials}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-white/40">Texture Size</span>
                          <span className="text-white">{selectedAsset.technical.textureSize}</span>
                        </div>
                      </div>
                    </div>

                    {/* File Info */}
                    <div className="bg-black/40 rounded-lg p-4 border border-white/5">
                      <h4 className="text-sm font-medium text-white/40 mb-3">File Information</h4>
                      <div className="space-y-2">
                        <div className="flex justify-between">
                          <span className="text-white/40">File Size</span>
                          <span className="text-white">{selectedAsset.technical.fileSize}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-white/40">Animations</span>
                          <span className="text-white">{selectedAsset.technical.animations}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-white/40">Format</span>
                          <span className="text-white">{selectedAsset.format.toUpperCase()}</span>
                        </div>
                      </div>
                    </div>

                    {/* Storage Info */}
                    <div className="bg-black/40 rounded-lg p-4 border border-white/5">
                      <h4 className="text-sm font-medium text-white/40 mb-3">Storage Details</h4>
                      <div className="space-y-2">
                        <div className="flex justify-between">
                          <span className="text-white/40">Storage Type</span>
                          <span className="text-white">{selectedAsset.technical.storage.type}</span>
                        </div>
                        <div className="flex items-center justify-between">
                          <span className="text-white/40">Hash</span>
                          <span className="text-white text-sm font-mono">
                            {selectedAsset.technical.storage.hash}
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ) : (
            <div className="flex-1 flex items-center justify-center text-white/40">
              Select an asset to view details
            </div>
          )}
        </div>
      </main>
    </div>
  );
};

export default NFTViewer;
